
import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tooltip } from '@/components/ui/tooltip';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
type Item = {
  id: number;
  name: string;
  image: string;
  special: boolean;
};

type Recipe = {
  id: number;
  items: number[];
  result: string;
  resultImage: string;
  description: string;
};

const PixelCauldron = () => {
  // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
  const items: Item[] = [
    { id: 1, name: '–í–æ–¥–∞', image: 'üíß', special: false },
    { id: 2, name: '–û–≥–æ–Ω—å', image: 'üî•', special: false },
    { id: 3, name: '–ó–µ–º–ª—è', image: 'üå±', special: false },
    { id: 4, name: '–í–æ–∑–¥—É—Ö', image: 'üí®', special: false },
    { id: 5, name: '–ú–µ—Ç–∞–ª–ª', image: '‚öôÔ∏è', special: false },
    { id: 6, name: '–ö—Ä–∏—Å—Ç–∞–ª–ª', image: 'üíé', special: false },
    { id: 7, name: '–ì—Ä–∏–±', image: 'üçÑ', special: false },
    { id: 8, name: '–¶–≤–µ—Ç–æ–∫', image: 'üå∏', special: false },
    { id: 9, name: '–ö–æ—Å—Ç—å', image: 'ü¶¥', special: false },
    { id: 10, name: '–ó–≤–µ–∑–¥–∞', image: '‚≠ê', special: false },
    { id: 11, name: '–õ—É–Ω–∞', image: 'üåô', special: false },
    { id: 12, name: '–°–æ–ª–Ω—Ü–µ', image: '‚òÄÔ∏è', special: false },
    { id: 13, name: '–ì–ª–∞–∑', image: 'üëÅÔ∏è', special: false },
    { id: 14, name: '–ó—É–±', image: 'ü¶∑', special: false },
    { id: 15, name: '–ü–µ—Ä–æ', image: 'ü™∂', special: false },
    { id: 16, name: '–ö–ª—é—á', image: 'üîë', special: false },
    { id: 17, name: '–ü–µ—Å–æ–∫', image: 'üèùÔ∏è', special: false },
    { id: 18, name: '–õ—ë–¥', image: 'üßä', special: false },
    { id: 19, name: '–ú–æ–ª–Ω–∏—è', image: '‚ö°', special: false },
    { id: 20, name: '–¢–µ–Ω—å', image: 'üë§', special: false },
    { id: 21, name: '–î—Ä–µ–≤–µ—Å–∏–Ω–∞', image: 'ü™µ', special: false },
    { id: 22, name: '–í–æ–ª—à–µ–±–Ω–∞—è –ø—ã–ª—å', image: '‚ú®', special: true },
    { id: 23, name: '–î—Ä–∞–∫–æ–Ω–∏–π –≥–ª–∞–∑', image: 'üêâ', special: true },
    { id: 24, name: '–°–µ—Ä–¥—Ü–µ —Ñ–µ–Ω–∏–∫—Å–∞', image: '‚ù§Ô∏è‚Äçüî•', special: true },
    { id: 25, name: '–°–ª–µ–∑–∞ —Ä—É—Å–∞–ª–∫–∏', image: 'üí¶', special: true },
    { id: 26, name: '–ó–≤—ë–∑–¥–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è', image: 'üå†', special: true },
  ];

  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
  const recipes: Recipe[] = [
    { 
      id: 1, 
      items: [1, 2], 
      result: '–ü–∞—Ä–æ–≤–æ–µ –æ–±–ª–∞–∫–æ', 
      resultImage: '‚òÅÔ∏è', 
      description: '–í–æ–¥–∞ + –û–≥–æ–Ω—å = –ü–∞—Ä–æ–≤–æ–µ –æ–±–ª–∞–∫–æ' 
    },
    { 
      id: 2, 
      items: [1, 3], 
      result: '–ì—Ä—è–∑—å', 
      resultImage: 'üü§', 
      description: '–í–æ–¥–∞ + –ó–µ–º–ª—è = –ì—Ä—è–∑—å' 
    },
    { 
      id: 3, 
      items: [2, 3], 
      result: '–õ–∞–≤–∞', 
      resultImage: 'üåã', 
      description: '–û–≥–æ–Ω—å + –ó–µ–º–ª—è = –õ–∞–≤–∞' 
    },
    { 
      id: 4, 
      items: [1, 22], 
      result: '–†–∞–¥—É–∂–Ω–∞—è –≤–æ–¥–∞', 
      resultImage: 'üåà', 
      description: '–í–æ–¥–∞ + –í–æ–ª—à–µ–±–Ω–∞—è –ø—ã–ª—å = –†–∞–¥—É–∂–Ω–∞—è –≤–æ–¥–∞' 
    },
    { 
      id: 5, 
      items: [22, 23, 24], 
      result: '–≠–ª–∏–∫—Å–∏—Ä –±–µ—Å—Å–º–µ—Ä—Ç–∏—è', 
      resultImage: '‚è≥', 
      description: '–í–æ–ª—à–µ–±–Ω–∞—è –ø—ã–ª—å + –î—Ä–∞–∫–æ–Ω–∏–π –≥–ª–∞–∑ + –°–µ—Ä–¥—Ü–µ —Ñ–µ–Ω–∏–∫—Å–∞ = –≠–ª–∏–∫—Å–∏—Ä –±–µ—Å—Å–º–µ—Ä—Ç–∏—è' 
    },
    // –ò —Ç–∞–∫ –¥–∞–ª–µ–µ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–µ –ø—Ä–∏–≤–æ–∂—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [cauldronItems, setCauldronItems] = useState<Item[]>([]);
  const [result, setResult] = useState<string | null>(null);
  const [resultImage, setResultImage] = useState<string | null>(null);
  const [coins, setCoins] = useState(0);
  const [draggedItem, setDraggedItem] = useState<Item | null>(null);
  const [showRecipes, setShowRecipes] = useState(false);

  // Refs
  const cauldronRef = useRef<HTMLDivElement>(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragStart = (item: Item) => {
    setDraggedItem(item);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    if (draggedItem && cauldronItems.length < 3) {
      setCauldronItems([...cauldronItems, draggedItem]);
      setDraggedItem(null);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞
  const checkRecipe = (items: Item[]): Recipe | null => {
    const itemIds = items.map(item => item.id).sort((a, b) => a - b);
    return recipes.find(recipe => {
      const recipeIds = [...recipe.items].sort((a, b) => a - b);
      if (recipeIds.length !== itemIds.length) return false;
      return recipeIds.every((id, index) => id === itemIds[index]);
    }) || null;
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–∞—Ä–∫–∏
  const brew = () => {
    if (cauldronItems.length === 0) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const hasSpecialItem = cauldronItems.some(item => item.special);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    if (hasSpecialItem) {
      setCoins(coins + 5);
    } else {
      setCoins(coins + 1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç
    const recipe = checkRecipe(cauldronItems);
    
    if (recipe) {
      setResult(recipe.result);
      setResultImage(recipe.resultImage);
    } else {
      // –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
      const randomResults = [
        { name: '–°—Ç—Ä–∞–Ω–Ω–∞—è –∂–∏–∂–∞', image: 'üü¢' },
        { name: '–ü—É–∑—ã—Ä—è—â–∞—è—Å—è –º–∞—Å—Å–∞', image: 'ü´ß' },
        { name: '–î—ã–º—è—â–∞—è—Å—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏—è', image: 'üí≠' },
        { name: '–°–≤–µ—Ç—è—â–∞—è—Å—è –∂–∏–¥–∫–æ—Å—Ç—å', image: 'üîÜ' },
        { name: '–†–∞–¥—É–∂–Ω–∞—è –≤–æ–¥–∞', image: 'üåà' },
        { name: '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –æ—Å–∞–¥–æ–∫', image: 'üîπ' },
        { name: '–ò—Å–∫—Ä—è—â–∏–π—Å—è —Ç—É–º–∞–Ω', image: '‚ú®' }
      ];
      
      const randomResult = randomResults[Math.floor(Math.random() * randomResults.length)];
      setResult(randomResult.name);
      setResultImage(randomResult.image);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ—Ç–µ–ª
    setTimeout(() => {
      setCauldronItems([]);
    }, 1500);
  };

  // –°–±—Ä–æ—Å –∫–æ—Ç–ª–∞
  const resetCauldron = () => {
    setCauldronItems([]);
    setResult(null);
    setResultImage(null);
  };

  return (
    <div className="min-h-screen bg-gray-800 flex flex-col items-center justify-start pt-8 pb-16 px-4">
      <h1 className="text-4xl font-pixel mb-6 text-white">–ü–∏–∫—Å–µ–ª—å–Ω—ã–π –ö–æ—Ç—ë–ª</h1>
      
      <div className="w-full max-w-6xl grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –†–µ—Ü–µ–ø—Ç—ã */}
        <div className="md:col-span-1">
          <Card className="bg-gray-700 border-gray-600 shadow-lg p-4 h-full">
            <h2 className="text-2xl font-pixel mb-4 text-white">–†–µ—Ü–µ–ø—Ç—ã <span className="text-sm">({recipes.length})</span></h2>
            <ScrollArea className="h-[500px] pr-4">
              <div className="space-y-3">
                {recipes.slice(0, 10).map((recipe) => (
                  <div key={recipe.id} className="px-3 py-2 bg-gray-800 rounded-md">
                    <div className="flex items-center gap-2">
                      {recipe.items.map(itemId => {
                        const item = items.find(i => i.id === itemId);
                        return item ? (
                          <span key={item.id} className="text-2xl">{item.image}</span>
                        ) : null;
                      })}
                      <span className="text-white">‚Üí</span>
                      <span className="text-2xl">{recipe.resultImage}</span>
                    </div>
                    <p className="text-xs text-gray-300 mt-1">{recipe.description}</p>
                  </div>
                ))}
                <Button 
                  variant="outline" 
                  className="w-full mt-2 border-dashed border-gray-600"
                  onClick={() => setShowRecipes(!showRecipes)}
                >
                  {showRecipes ? "–°–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤"}
                </Button>
                
                {showRecipes && (
                  <div className="mt-4 space-y-3">
                    {recipes.slice(10, 35).map((recipe) => (
                      <div key={recipe.id} className="px-3 py-2 bg-gray-800 rounded-md">
                        <div className="flex items-center gap-2">
                          {recipe.items.map(itemId => {
                            const item = items.find(i => i.id === itemId);
                            return item ? (
                              <span key={item.id} className="text-2xl">{item.image}</span>
                            ) : null;
                          })}
                          <span className="text-white">‚Üí</span>
                          <span className="text-2xl">{recipe.resultImage}</span>
                        </div>
                        <p className="text-xs text-gray-300 mt-1">{recipe.description}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </ScrollArea>
          </Card>
        </div>
        
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–æ—Ç—ë–ª */}
        <div className="md:col-span-1">
          <div className="flex flex-col items-center h-full">
            <Badge variant="outline" className="mb-4 bg-amber-800 text-amber-200 border-amber-600 px-4 py-2 text-lg font-pixel">
              <span className="text-lg mr-1">ü™ô</span> {coins}
            </Badge>
            
            <div 
              ref={cauldronRef}
              className="relative w-64 h-64 bg-gray-900 rounded-full border-4 border-gray-600 overflow-hidden mb-6 flex items-center justify-center"
              onDragOver={handleDragOver}
              onDrop={handleDrop}
            >
              {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ç–ª–∞ */}
              <div className={cn(
                "absolute bottom-0 w-full transition-all duration-500",
                cauldronItems.length === 0 ? "h-1/4 bg-gray-700" : 
                cauldronItems.length === 1 ? "h-2/4 bg-gray-600" : 
                cauldronItems.length === 2 ? "h-3/4 bg-gray-500" : 
                "h-5/6 bg-gray-400"
              )}>
                {/* –ë—É—Ä–ª–µ–Ω–∏–µ */}
                <div className="absolute top-0 left-0 w-full">
                  {Array(8).fill(0).map((_, i) => (
                    <div 
                      key={i} 
                      className="absolute rounded-full bg-gray-800 opacity-20 animate-pulse"
                      style={{
                        width: `${10 + Math.random() * 20}px`,
                        height: `${10 + Math.random() * 20}px`,
                        left: `${Math.random() * 100}%`,
                        animationDelay: `${Math.random() * 2}s`,
                        animationDuration: `${1 + Math.random() * 3}s`,
                      }}
                    />
                  ))}
                </div>
              </div>
              
              {/* –ü—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–æ—Ç–ª–µ */}
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 flex items-center justify-center flex-wrap gap-2 z-10">
                {cauldronItems.map((item, index) => (
                  <div 
                    key={index} 
                    className="text-4xl animate-bounce"
                    style={{ animationDelay: `${index * 0.2}s` }}
                  >
                    {item.image}
                  </div>
                ))}
              </div>
              
              {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Ä–∫–∏ */}
              {result && resultImage && (
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20 flex flex-col items-center">
                  <div className="text-5xl animate-pulse mb-2">{resultImage}</div>
                  <p className="text-white bg-gray-800 bg-opacity-75 px-2 py-1 rounded text-sm">{result}</p>
                </div>
              )}
            </div>
            
            <div className="flex gap-3">
              <Button 
                onClick={brew} 
                disabled={cauldronItems.length === 0}
                className="px-6 bg-amber-600 hover:bg-amber-700 text-white font-pixel"
              >
                –°–≤–∞—Ä–∏—Ç—å
              </Button>
              <Button 
                onClick={resetCauldron} 
                variant="outline"
                className="border-gray-500 text-gray-300 font-pixel"
                disabled={cauldronItems.length === 0}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>
            
            <div className="mt-4 flex gap-2 flex-wrap justify-center">
              {cauldronItems.map((item, idx) => (
                <Badge key={idx} variant={item.special ? "default" : "secondary"} className="text-sm">
                  {item.name} {item.image}
                </Badge>
              ))}
              {cauldronItems.length === 0 && (
                <p className="text-gray-400 text-sm italic">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–æ—Ç—ë–ª</p>
              )}
              {cauldronItems.length >= 3 && (
                <p className="text-yellow-400 text-sm">–ö–æ—Ç—ë–ª –ø–æ–ª–æ–Ω! (–º–∞–∫—Å–∏–º—É–º 3)</p>
              )}
            </div>
          </div>
        </div>
        
        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
        <div className="md:col-span-1">
          <Card className="bg-gray-700 border-gray-600 shadow-lg p-4 h-full">
            <h2 className="text-2xl font-pixel mb-4 text-white">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã <span className="text-sm">({items.length})</span></h2>
            <div className="grid grid-cols-4 gap-3">
              {items.map((item) => (
                <div 
                  key={item.id}
                  className={cn(
                    "flex flex-col items-center justify-center p-2 rounded-md cursor-grab",
                    "border border-gray-600 hover:border-gray-400 transition-colors",
                    item.special ? "bg-purple-900 bg-opacity-50" : "bg-gray-800"
                  )}
                  draggable
                  onDragStart={() => handleDragStart(item)}
                >
                  <div className="text-3xl mb-1">{item.image}</div>
                  <p className="text-xs text-center text-gray-300 truncate w-full">{item.name}</p>
                  {item.special && (
                    <Badge variant="secondary" className="mt-1 text-[10px] px-1 bg-purple-800">
                      –æ—Å–æ–±—ã–π
                    </Badge>
                  )}
                </div>
              ))}
            </div>
            <p className="text-xs text-gray-400 mt-3">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–æ—Ç—ë–ª (–¥–æ 3 —à—Ç)</p>
            <p className="text-xs text-amber-400 mt-1">
              <span className="text-amber-300">üí°</span> –û—Å–æ–±—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ) –¥–∞—é—Ç 5 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤–∞—Ä–∫–µ
            </p>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default PixelCauldron;
